import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { ulid } from 'ulid';
import { Endpoints } from '../util/api-types';
import {
  LOCAL_CREATED_AT,
  LOCAL_GAME_ID,
  LOCAL_PLAYER_PREFIX,
  LOCAL_SESSION_ID,
} from '../util/constants';
import { Game } from '../util/game-types';
import { Player, PlayerForm } from '../util/player-types';
import { SessionStorageKeys } from '../util/session-storage-types';
import { OmitAutogeneratedProperties } from '../util/utility-types';
import { ApiService } from './api.service';
import { SessionStorageService } from './session-storage.service';

@Injectable({
  providedIn: 'root',
})
export class PlayerService {
  private readonly apiService = inject(ApiService);
  private readonly sessionStorageService = inject(SessionStorageService);

  // Online Player Methods
  createOnlinePlayer(
    playerForm: OmitAutogeneratedProperties<Player>,
  ): Observable<Player> {
    return this.apiService.post<Player>(Endpoints.PLAYER, playerForm);
  }

  getOnlinePlayerById(playerId: Player['id']): Observable<Player | null> {
    return this.apiService.get<Player | null>([Endpoints.PLAYER, playerId]);
  }

  getOnlinePlayersByGameId(gameId: Game['id']): Observable<Player[]> {
    return this.apiService.get<Player[]>(Endpoints.PLAYER, {
      gameId,
    });
  }

  updateOnlinePlayer(
    playerId: Player['id'],
    playerUpdates: Partial<Player>,
  ): Observable<Player | null> {
    return this.apiService.update<Player | null>(
      [Endpoints.PLAYER, playerId],
      playerUpdates,
    );
  }

  deleteOnlinePlayer(playerId: Player['id']): Observable<Player | null> {
    return this.apiService.delete<Player | null>([Endpoints.PLAYER, playerId]);
  }

  reorderOnlinePlayers(gameId: Game['id'], playerIds: Player['id'][]) {
    return this.apiService.update<Player[]>(
      [Endpoints.PLAYER, 'reorder', gameId],
      playerIds,
    );
  }

  // Local Player Methods - these treat session storage as a "local" database
  createLocalPlayer(playerForm: PlayerForm) {
    const localPlayers = (this.sessionStorageService.getItem(
      SessionStorageKeys.Players,
    ) ?? []) as Player[];

    const newPlayer = {
      ...playerForm,
      id: `${LOCAL_PLAYER_PREFIX}${ulid()}`,
      position: localPlayers.length
        ? Math.max(...localPlayers.map((player) => player.position)) + 1
        : 0,
      gameId: LOCAL_GAME_ID,
      sessionId: LOCAL_SESSION_ID,
      createdAt: LOCAL_CREATED_AT,
    };

    localPlayers.push(newPlayer);

    this.sessionStorageService.setItem(
      SessionStorageKeys.Players,
      localPlayers,
    );

    return newPlayer;
  }

  updateLocalPlayer(playerId: Player['id'], playerUpdates: Partial<Player>) {
    const localPlayers = (this.sessionStorageService.getItem(
      SessionStorageKeys.Players,
    ) ?? []) as Player[];

    const updatedLocalPlayers = localPlayers.map((player) =>
      player.id === playerId ? { ...player, ...playerUpdates } : player,
    );

    this.sessionStorageService.setItem(
      SessionStorageKeys.Players,
      updatedLocalPlayers,
    );

    return updatedLocalPlayers.find((player) => player.id === playerId);
  }

  getLocalPlayersFromSessionStorage(): Player[] {
    return (this.sessionStorageService.getItem(SessionStorageKeys.Players) ??
      []) as Player[];
  }

  deleteLocalPlayer(playerId: Player['id']): Player | undefined {
    const localPlayers = (this.sessionStorageService.getItem(
      SessionStorageKeys.Players,
    ) ?? []) as Player[];

    const deletedPlayer = localPlayers.find((player) => player.id === playerId);

    const updatedLocalPlayers = localPlayers.filter(
      (player) => player.id !== playerId,
    );

    this.sessionStorageService.setItem(
      SessionStorageKeys.Players,
      updatedLocalPlayers,
    );

    return deletedPlayer;
  }

  reorderLocalPlayers(playerIds: Player['id'][]) {
    const reorderedLocalPlayers = (this.sessionStorageService.getItem(
      SessionStorageKeys.Players,
    ) ?? []) as Player[];

    reorderedLocalPlayers.forEach((player) => {
      player.position = playerIds.findIndex(
        (playerId) => playerId === player.id,
      );
    });

    this.sessionStorageService.setItem(
      SessionStorageKeys.Players,
      reorderedLocalPlayers,
    );

    return reorderedLocalPlayers;
  }
}
