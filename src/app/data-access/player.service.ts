import {
  effect,
  inject,
  Injectable,
  signal,
  WritableSignal,
} from '@angular/core';
import { LocalStorageService, LocalStorageKeys } from './local-storage.service';
import { OmitAutogeneratedProperties } from '../shared/type-helpers';

export type PlayerModel = {
  id: number;
  display_name: string;
  color: string;
  avatar_url?: string;
};

export enum PlayerColors {
  Red = '#F34141',
  Orange = '#F38141',
  Yellow = '#F3CC41',
  Green = '#38D048',
  Blue = '#4188F3',
  Violet = '#B041F3',
  Pink = '#F659CA',
  Cyan = '#41D9FB',
  Brown = '#8E744D',
  White = '#D3D3D3',
  Gray = '#767676',
  Black = '#181818',
}

@Injectable({
  providedIn: 'root',
})
export class PlayerService {
  private readonly localStorageService = inject(LocalStorageService);

  readonly players: WritableSignal<PlayerModel[]>;

  constructor() {
    this.players = signal(
      (this.localStorageService.getItem(LocalStorageKeys.Players) ??
        []) as PlayerModel[]
    );
  }

  // update local storage whenever value of players array changes
  private readonly localStoragePlayerUpdateEffect = effect(() =>
    this.localStorageService.setItem(LocalStorageKeys.Players, this.players())
  );

  createPlayer(newPlayer: OmitAutogeneratedProperties<PlayerModel>) {
    const newId = this.players().length
      ? Math.max(...this.players().map((player) => player.id)) + 1
      : 1;
    this.players.update((players) => [...players, { id: newId, ...newPlayer }]);
  }

  updatePlayer(
    id: number,
    updatedPlayer: OmitAutogeneratedProperties<PlayerModel>
  ) {
    this.players.update((players) =>
      players.map((player) =>
        player.id === id ? { id, ...updatedPlayer } : player
      )
    );
  }

  deletePlayer(id: number) {
    this.players.update((players) =>
      players.filter((player) => player.id !== id)
    );
  }
}
